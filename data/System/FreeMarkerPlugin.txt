%META:TOPICPARENT{name="Plugins"}%
---+ <nop>FreeMarker Plugin

%SHORTDESCRIPTION%

<blockquote>
<nop>FreeMarker is a "template engine"; a generic tool to generate text output (anything from HTML to autogenerated source code) based on templates.

http://freemarker.sourceforge.net/
</blockquote>

%TOC%

---++ Why another template language?
<nop>FreeMarker can be used next to Foswiki templates:
   * <nop>FreeMarker has powerful features like if/else conditionals, list functions, scalar, array and hash variables, calculations and string manipulations. Especially when combined with Foswiki macros these are very powerful.
   * The template markup can be used in plain topics without using template files or template topics.
   * Developers can use the parser to create application frontends. A good example is the configure interface of Foswiki 1.1 that uses <nop>FreeMarker templates.

<blockquote>
<nop>FreeMarker Plugin uses a parser written in Perl using CPAN:Parse::Yapp. The Yapp module is compiled with the parser code so you don't need to install anything else.
</blockquote>

Feed the plugin some template text, optionally pass data, and get the combined result:

<div class="foswikiImage">
<img src="%ATTACHURLPATH%/basic_scheme.png" alt="basic_scheme.png" width='612' height='442' />
</div>

---++ Plugin syntax
<verbatim>
%STARTFREEMARKER{ params }%
template
%ENDFREEMARKER%
</verbatim>

   * =params= contains the data object to pass to the template. See [[#PassingData][Passing data to the template]].
   * =template= is the <nop>FreeMarker template text that contains <nop>FreeMarker syntax

---+++ <nop>FreeMarker syntax
<nop>FreeMarker plugin understands the most usable <nop>FreeMarker syntax - [[#ImplementedSyntax][see below for a list]].

<nop>FreeMarker syntax is extensively documented at http://freemarker.sourceforge.net/docs/

If you are new to <nop>FreeMarker, these examples may give you an idea.

Conditionally write a headline with variable size:
<verbatim>
<#if headline??>
	<h${depth}>${headline}</h${depth}>
</#if>
</verbatim>

Combining lists:
<verbatim>
<#list users + admins + children as person>
   * ${person}
</#list>
</verbatim>

Using data in the template:
<verbatim>
<#assign names=["John", "Ashley"]>
${names[0]}, ${names[1]}
</verbatim>

Conditionally writing blocks of text:
<verbatim>
<#assign localNoUpdate>
	<h2>Nothing to save - you haven't made any changes yet</h2>
</#assign>

<#assign localUpdate>
	<h2>You are about to update 
	<#if modifiedCount == 1>
		one setting
	<#else>
		${modifiedCount} settings
	</#if>
	</h2>
</#assign>

<#if modifiedCount == 0>
	${localNoUpdate}
<#else>
	${localUpdate}
</#if>
</verbatim>

#PassingData
---+++ Passing data to the parser
Any data you pass as macro parameters is converted to a Perl object. For example, with:
<verbatim>
%STARTFREEMARKER{ x="[one,two,three]" }%
</verbatim>
=x= is now an array with 3 strings.

You can pass strings, numbers, arrays and hashes. But note: data keys cannot be one of the reserved keywords. All words under string and array operations are reserved. For example, =${size}= is illegal syntax; use =${headersize}= instead.

<blockquote>
In a template, strings must always be quoted; in macro parameters, quotes are optional.
</blockquote>

---++++ Data formats
Passing an array:
<verbatim>
%STARTFREEMARKER{users="[Ashton, Bonny, Zeta]"}%
</verbatim>

Passing a hash:
<verbatim>
%STARTFREEMARKER{ x="{name:Muriel, age:24}" }%
</verbatim>

Passing an array of hashes:
<verbatim>
%STARTFREEMARKER{vars="[{color:red, value:255},{color:green, value:100}]"}%
</verbatim>

Passing hashes that contain arrays:
<verbatim>
%STARTFREEMARKER{
vars="{
	users    : [ Joe,    Fred ],
	admins   : [ Julia,  Kate ],
	children : [ Mickey, Rooney ]
}"}%
</verbatim>

---++++ Using data in templates
Iterating over an array:
<verbatim>
%STARTFREEMARKER{users="[Ashton, Bonny, Zeta]"}%
<#list users as x>
- ${x}
</#list>
%ENDFREEMARKER%
</verbatim>

Iterating over an array that has been created by =SEARCH= (the search macro has been escaped to postpone it's rendering):
<verbatim>
%STARTFREEMARKER{
topics="[$percntSEARCH{$quot*$quot web=$quotSystem$quot format=$quot$topic$quot nonoise=$quoton$quot separator=$quot,$quot limit=$quot20$quot}$percnt]"
}%
<noautolink>
<#list topics as topic>
- ${topic}
</#list>
</noautolink>
%ENDFREEMARKER%
</verbatim>

Combining arrays:
<verbatim>
%STARTFREEMARKER{
vars="{
	users    : [ Joe,    Fred ],
	admins   : [ Julia,  Kate ],
	children : [ Mickey, Rooney ]
}"}%
<#list vars.users + vars.admins + vars.children as person>
- ${person}
</#list>
%ENDFREEMARKER%
</verbatim>

Retrieving a hash value:
<verbatim>
%STARTFREEMARKER{
vars="[{color:red, value:255},{color:green, value:100}]"}%
${vars[1].color}
%ENDFREEMARKER%
</verbatim>





---+++ Elaborate example
See Sandbox.FreeMarkerPluginExample for an elaborate example.

#ImplementedSyntax
---+++ Implemented syntax
   * Directives:
      * If-statements =&lt;#if condition &gt; ...&lt;#elseif condition &gt; ... &lt;#else&gt; ... &lt;/#if&gt;=
      * Assignments: =&lt;#assign var=value&gt;= and =&lt;#assign var&gt; value &lt;/#assign&gt;=
      * List iterator: =&lt;#list sequence as item&gt; ... &lt;/#list&gt;=
   * Comments: =&lt;#-- ... --&gt;=
   * Variable substitution: =${variable_name}=
   * String operations: =cap_first=, =capitalize=, =eval=, =html=, =length=, =lower_case=, =replace=, =string=, =substring=, =uncap_first=, =upper_case=, =word_list=, =xhtml=
   * Array operations: =first=, =join=, =last=, =reverse=, =seq_contains=, =seq_index_of=, =size=, =sort=, =sort_by= 
   * Function calls


---+++ Not implemented
   * Dates, date operations
   * User-defined directives
   * Nodes, node operations
   * switch, case, default, break
   * break
   * include
   * import
   * noparse
   * compress
   * escape, noescape
   * global
   * local
   * setting
   * nested, return
   * function, return
   * flush
   * stop
   * t, lt, rt
   * nt
   * attempt, recover
   * visit, recurse, fallback

---++ Test
---+++!! Assignment
<verbatim>
%STARTFREEMARKER{}%
<verbatim>
<#assign names=["John", "Ashley"]>
${names[0]}, ${names[1]}
</verbatim>
%ENDFREEMARKER%
</verbatim>
If installed, results in:
%STARTFREEMARKER{}%
<#assign names=["John", "Ashley"]>
${names[0]}, ${names[1]}
%ENDFREEMARKER%

---+++!! Condition
<verbatim>
%STARTFREEMARKER{headline="Welcome!" depth="4" class="foswikiHelp"}%
<#if headline??>
	<h${depth} class="${class}">${headline}</h${depth}>
</#if>
%ENDFREEMARKER%
</verbatim>
If installed, results in:
%STARTFREEMARKER{headline="Welcome!" depth="4" class="foswikiHelp"}%
<#if headline??>
	<h${depth} class="${class}">${headline}</h${depth}>
</#if>
%ENDFREEMARKER%

---+++!! Replace
<verbatim>
%STARTFREEMARKER{}%
${"Good morning, mister Vain"?replace("Good morning","Guten Morgen")}
%ENDFREEMARKER%
</verbatim>
If installed, results in:
%STARTFREEMARKER{}%
${"Good morning, mister Vain"?replace("Good morning","Guten Morgen")}
%ENDFREEMARKER%


---++ Troubleshooting
If nothing gets rendered between =STARTFREEMARKER= and =ENDFREEMARKER=, look for any syntax errors.

   * Check for =&lt;#/if&gt;= that should be =&lt;/#if&gt;=.
   * Check for unclosed or non-matching closing tags
   * Turn on =FREEMARKERPLUGIN_DEBUG= - the parser output is written to the webserver error log, the plugin output to Foswiki's debug log
   * Perhaps you have used one of the reserved keywords (words listed in string and array operations cannot be used for data keys)
   


---++ Background
   * http://freemarker.sourceforge.net/
   * Wikipedia:FreeMarker
   

---++ For developers
---+++ Cautionary note
This plugin is an approximation of the results that the <nop>FreeMarker Java code produces. I haven't found a specification for the language, and the documentation leaves room for interpretation. So some things will be different, some things may not be right. Please visit http://foswiki.org/Support/%TOPIC% if you think this plugin can be improved.

---+++ Parsing text
Create a parser object and feed it some text:
<verbatim>
my $template = 'some text with FreeMarker syntax: ${10 + 2 * 3}';
my $parser = new Foswiki::Plugins::FreeMarkerPlugin::FreeMarkerParser();
my $parsed = $parser->parse( $template );
</verbatim>

---+++ Parsing text and data
Create a parser object and feed it text plus a data object. <nop>FreeMarker understands scalars, arrays and hashes, and this plugin assumes you pass the objects by reference.
<verbatim>
my $vars = {
	users    => [ 'Joe',    'Fred' ],
	admins   => [ 'Julia',  'Kate' ],
	children => [ 'Mickey', 'Rooney' ]
};
my $template = '<#list users + admins + children as person>
* ${person}
</#list>';
my $parser = new Foswiki::Plugins::FreeMarkerPlugin::FreeMarkerParser();
my $parsed = $parser->parse( $template, $vars );
my $data = $parser->{data};
</verbatim>
The =$parser->{data}= object contains the input data transformed by the parser.

---+++ Calling functions from <nop>FreeMarker
<verbatim>
sub func {
	my ($str) = @_;
	
	# do something
}

my $template = '${doFunc("hello!")}';
my $parser = new Foswiki::Plugins::FreeMarkerPlugin::FreeMarkerParser();
my $parsed = $parser->parse($template, {
	doFunc  => \&func,
});
</verbatim>

---+++ Working with the parsers
You need to install CPAN:Parse::Yapp. See the source code for compile instructions.


---+++ Debugging
Turn on Parse::Yapp debugging with =debugLevel=:
<verbatim>
my $parser = new Foswiki::Plugins::FreeMarkerPlugin::FreeMarkerParser();
$parser->{debugLevel} = 0x1F;
</verbatim>

Error level values:
<verbatim>
Bit Value    Outputs
0x01         Token reading (useful for Lexer debugging)
0x02         States information
0x04         Driver actions (shifts, reduces, accept...)
0x08         Parse Stack dump
0x10         Error Recovery tracing
</verbatim>

Additional debugging statements can be turned on with =debug=:
<verbatim>
my $parser = new Foswiki::Plugins::FreeMarkerPlugin::FreeMarkerParser();
$parser->{debug} = 0x1F;
</verbatim>


---++ Plugin Preferences

<!--
One line description, required for extensions repository catalog.
   * Set SHORTDESCRIPTION = %$SHORTDESCRIPTION%.
-->
   * To enable debugging, set DEBUG to 1 (not in this topic, use <nop>Main.SitePreferences for example):
      * Set FREEMARKERPLUGIN_DEBUG =

---++ Installation
%$INSTALL_INSTRUCTIONS%


---++ Plugin Info

|  Author: | Foswiki:Main.ArthurClemens |
|  Copyright: | &copy; 2010, Arthur Clemens |
|  License: | GPL ([[http://www.gnu.org/copyleft/gpl.html][GNU General Public License]]) |
|  Release: | %$RELEASE% |
|  Version: | %$VERSION% |
|  Change&nbsp;History: | <!-- versions below in reverse order -->&nbsp; |
|  04 Dec 2010 | 1.1.0: Many improvements to the parser. Support for =macro= tag. |
|  03 Oct 2010 | 1.0.1: Fixed bug where a variable name that contained a string operation command resulted in a syntax error. | 
|  12 May 2010 | 1.0.0: First release |
|  Home: | http://foswiki.org/Extensions/%TOPIC% |
|  Support: | http://foswiki.org/Support/%TOPIC% |

%META:FILEATTACHMENT{name="basic_scheme.png" attachment="basic_scheme.png" attr="h" comment="" date="1273695296" path="basic_scheme.png" size="43603" user="BaseUserMapping_333" version="1"}%

